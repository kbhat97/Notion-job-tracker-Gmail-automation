// Replace these with your actual Notion API key and database ID
const NOTION_API_KEY = 'YOUR_NOTION_API_KEY';
const NOTION_DATABASE_ID = 'YOUR_NOTION_DATABASE_ID';

// Main function to process emails and send to Notion
function sendGmailJobsToNotion() {
  Logger.log("ðŸ§¼ Clearing Notion database before processing emails...");
  clearNotionDatabase();

  Logger.log("ðŸ“¨ Starting email processing...");
  const threads = GmailApp.search('subject:("application" OR "applied") newer_than:30d', 0, 200);
  Logger.log(`Found ${threads.length} matching threads.`);

  threads.forEach(thread => {
    const messages = thread.getMessages();
    messages.forEach(message => {
      const subject = message.getSubject();
      const body = message.getPlainBody();
      const from = message.getFrom();
      const date = message.getDate();

      const company = extractCompanyFromSender(from) || extractCompanyFromBody(body) || "Unknown Company";
      const jobTitle = extractJobTitle(subject, body) || "Unknown Position";
      const appliedDate = formatDateForNotion(date);

      const pageData = {
        parent: { database_id: NOTION_DATABASE_ID },
        properties: {
          "Company": {
            title: [
              {
                text: {
                  content: company
                }
              }
            ]
          },
          "Job Title": {
            rich_text: [
              {
                text: {
                  content: jobTitle
                }
              }
            ]
          },
          "Applied Date": {
            date: {
              start: appliedDate
            }
          }
        }
      };

      const options = {
        method: 'post',
        headers: notionHeaders(),
        payload: JSON.stringify(pageData),
        muteHttpExceptions: true
      };

      const response = UrlFetchApp.fetch("https://api.notion.com/v1/pages", options);
      Logger.log(`Added job application to Notion: ${company} - ${jobTitle}`);
    });
  });
}

// Function to clear the Notion database by archiving existing pages
function clearNotionDatabase() {
  const queryPayload = {
    page_size: 100
  };

  const queryOptions = {
    method: 'post',
    headers: notionHeaders(),
    payload: JSON.stringify(queryPayload),
    muteHttpExceptions: true
  };

  const queryResponse = UrlFetchApp.fetch(`https://api.notion.com/v1/databases/${NOTION_DATABASE_ID}/query`, queryOptions);
  const queryData = JSON.parse(queryResponse.getContentText());

  const ids = queryData.results.map(page => page.id);

  if (ids.length === 0) {
    Logger.log("No pages to archive.");
    return;
  }

  Logger.log(`ðŸ—‘ Archiving ${ids.length} pages...`);

  ids.forEach(id => {
    const archiveOptions = {
      method: 'patch',
      headers: notionHeaders(),
      payload: JSON.stringify({ archived: true }),
      muteHttpExceptions: true
    };
    UrlFetchApp.fetch(`https://api.notion.com/v1/pages/${id}`, archiveOptions);
    Logger.log(`Archived page: ${id}`);
  });
}

// Helper function to set Notion API headers
function notionHeaders() {
  return {
    'Authorization': `Bearer ${NOTION_API_KEY}`,
    'Content-Type': 'application/json',
    'Notion-Version': '2022-06-28'
  };
}

// Function to extract company name from the sender's email
function extractCompanyFromSender(from) {
  const nameMatch = from.match(/^"?([^"<]+)"?\s*(?:<.+>)?$/);
  if (nameMatch) {
    let displayName = nameMatch[1].trim();
    displayName = displayName.replace(/team|recruiting|careers|hr|talent|noreply/gi, "").trim();

    const blacklist = ["thank you", "we have", "your application", "do not reply", "noreply", "openings", "jobs", "update", "auto-reply"];
    if (displayName && !blacklist.some(term => displayName.toLowerCase().includes(term))) {
      return capitalize(displayName);
    }
  }

  const emailMatch = from.match(/@([\w-]+)\./i);
  if (emailMatch) {
    const domain = emailMatch[1];
    if (!isJobPlatform(domain)) {
      return capitalize(domain);
    }
  }

  return null;
}

// Function to extract company name from the email body
function extractCompanyFromBody(body) {
  const lines = body.split('\n');
  for (let line of lines) {
    line = line.trim();
    if (line.toLowerCase().startsWith("company:")) {
      return capitalize(line.split(":")[1].trim());
    }
  }
  return null;
}

// Function to extract job title from subject or body
function extractJobTitle(subject, body) {
  const subjectMatch = subject.match(/application for (.+)/i);
  if (subjectMatch) {
    return capitalize(subjectMatch[1].trim());
  }

  const bodyMatch = body.match(/position of (.+)/i);
  if (bodyMatch) {
    return capitalize(bodyMatch[1].trim());
  }

  return null;
}

// Function to capitalize the first letter
function capitalize(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
}

// Function to check if a domain is a known job platform
function isJobPlatform(name) {
  if (!name) return true;
  const platforms = [
    'linkedin', 'indeed', 'glassdoor', 'ziprecruiter', 'monster',
    'lever', 'workday', 'greenhouse', 'angellist', 'smartrecruiters',
    'taleo', 'careerbuilder', 'wellfound', 'jobvite', 'hiringthing'
  ];
  return platforms.some(p => name.toLowerCase().includes(p));
}

// Function to format date for Notion
function formatDateForNotion(date) {
  return Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
}
